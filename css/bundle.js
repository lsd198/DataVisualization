(function (d3$1) {
  'use strict';

  const svg = d3$1.select('svg');
	svg.attr('width',window.innerWidth);
	svg.attr('height',window.innerHeight);


 const width = +svg.attr('width');
  const height = +svg.attr('height');


  const render = nodes => {
    
    const xValue = d => d.AFRPN;
    
    const yValue = d => d.Type;
    const circleRadius = d => Math.sqrt(d.Strength)*3.0;
    
    const margin = { top: 40, right: 40, bottom: 40, left: 150 };
    const innerWidth = width - margin.left - margin.right;
    const innerHeight = height - margin.top - margin.bottom;

    const color = d3$1.scaleOrdinal()
      .domain(nodes.map(d => d.Type))
      .range(d3$1.schemeCategory10);
    
    const xScale = d3$1.scalePoint()
      .domain(nodes.map(xValue))
      .range([0, innerWidth])
      .padding(0.5);
    
    const yScale = d3$1.scalePoint()
      .domain(nodes.map(yValue))
      .range([0, innerHeight])
      .padding(0.5);
    
    const g = svg.append('g')
      .attr('transform', `translate(${60},${0})`);
    
    const xAxis = d3$1.axisBottom(xScale)
      .tickSize(-innerHeight);
    
    const yAxis = d3$1.axisLeft(yScale)
      .tickSize(-innerWidth);
    
    const yAxisG = g.append('g').call(yAxis);
    const xAxisG = g.append('g').call(xAxis)
      .attr('transform', `translate(0,${innerHeight})`);

    
    const simulation = d3.forceSimulation(nodes)
      .force("charge", d3.forceManyBody().strength(1))
      .force("collision", d3.forceCollide().radius(d => circleRadius(d)))
  	  .force('x', d3.forceX().x(d => xScale(xValue(d))))
      .force('y', d3.forceY().y(d => yScale(yValue(d))))
  		.on('tick', ticked);
    
    function ticked() {
    
      const circle = g.selectAll('circle').data(nodes);
      
        circle.enter().append('circle')
          .attr('r', d => circleRadius(d))
          .attr('fill', d => color(d.Type))
      		.attr('cx', d => xScale(xValue(d)))
      		.attr('cy', d => yScale(yValue(d)))
        .merge(circle)
          .attr('cx', function(d) { return d.x })
          .attr('cy', function(d) { return d.y })
      		.call(drag(simulation));
      
      	circle.append("title")
      	  .text(d => d.Type + " " + d.Strength);
    }

    
    
  const drag = simulation => {
    
    function dragstarted(d) {
      if (!d3.event.active) { simulation.alphaTarget(0.3).restart(); }
      d.fx = d.x;
      d.fy = d.y;
    }
    
    function dragged(d) {
      d.fx = d3.event.x;
      d.fy = d3.event.y;
    }
    
    function dragended(d) {
      if (!d3.event.active) { simulation.alphaTarget(0); }
      d.fx = null;
      d.fy = null;
    }
    
    return d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended);
  };  
    
    
  };


  d3$1.csv('data.csv')
    .then(nodes => {
  //  	console.log(nodes);
    
      nodes.forEach(d => {
   			d.Strength = +d.Strength;
      });
      render(nodes);
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,